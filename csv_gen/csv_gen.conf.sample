# Configuration File for SCCSV (CSV_GEN rewrite 2)

[Settings]
# Hostname or IP Address of the Security Center server and the 
# port that you will be connecting to.
address = securitycenter.home.lan
port = 443

# Security Center version (4.2, or 4.4)
version = 4.4

# Username and password fo the account you will be running the
# queries with.
username = api_user
password = s3cr3tp@ssw0rd

# Do we want to have any debugging output?  Set to no
# if you want to have silent output.
debug = yes

# SMTP Server that we will be connecting to.
smtp_host = localhost

# Email Address that reports will be mailed from.
email_from = sc4@chigeek.com

# Global Subject heading.  This can be overriden in the individual
# CSVFILE sections with an option of the same name.
email_subject = CSV Report

# Global email body.  This can be overriden in the individual
# CSVFILE sections with an option of the same name.
email_msg = CSV Report Generated


# Individual sections for different CSV Files can be created by prepending
# 'CSVFILE: ' to the name of the report you wish to create.  In this example
# we will be creating test1.csv.
[CSVFILE: test1]

# First thing, do we want to generate and send an email with the CSV file
# attached?  If we do then say yes, otherwise leave to no.  If an email is
# sent then the csv file will also be deleted once the completed.
gen_email = no

# These are the email addresses that the finished report will be emailed to.
# There can be multiple email addresses here if you comma (,) seperate them.
email_to = smcgrath@tenable.com

# You need to specify the fields that will be in the report and the
# order that they will be in.  Please note that these are CASE SENSITIVE.
# 
# AVAILABLE FIELDS:
#   ip                      IP Address that the plugin Fired on
#   netbiosName             NetBIOS name of the host the plugin fired on.
#   dnsName                 DNS Name of the host the plugin fired on.
#   macAddress              Hardware Address of the host the plugin fired on.
#   pluginID                The Plugin ID
#   pluginName              Name of the Plugin
#   severity                Severity of the plugin fire.
#   port                    Port the plugin fired on.
#   pluginText              The raw plugin text data.
#   pluginSynopsis          Synopsis data from pluginText.
#   pluginDescription       Description data from pluginText.
#   pluginSeeAlso           See Also data from pluginText.
#   pluginSolution          Solution data from pluginText.
#   pluginRiskFactor        Risk Factor information from pluginText.
#   pluginCVE               CVE Numbers that were specified in pluginText.
#   pluginBID               BID Numbers that were specified in pluginText.
#   pluginCVSS              CVSS Base Score that is in pluginText.
#   pluginOtherRefs         Other References data from pluginText.
#	lastSeen				Number of days since last seen.
#	firstSeen				Number of days since discovered.
#	lastSeenDate			Date last seen.
#	firstSeenDate			Date first Discovered.
fields = ip,severity,pluginName,pluginDescription,pluginSolution,pluginCVE

# The data source of the data that we will querying.  You have a choice
# between 'cumulative' or 'mitigated'
datasource = cumulative

# Here we specify the filters that we will be using to query the api.  This
# must be a JSON-compatible dictionary string (use "" not '').  Please note
# that like before, everything is case sensitive.  Please refer to the API
# documentation for the available filters.  In the example below, we are
# filtering to get exploitable vulnerabilities in the active plugin set.
filter = {"exploitAvailable": "true", "pluginType": "active"}